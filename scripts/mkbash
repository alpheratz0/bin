#!/bin/bash

#
# create a bash script
# using a template file
#

function main() {
	parsed_args=$(getopt -o h -l help -n 'mkbash' -- "$@")
	getopt_exit_code=$?

	if [ $getopt_exit_code -ne 0 ] ; then
		exit 1
	fi

	eval set -- "$parsed_args"

	while :; do
		case "$1" in
			-h | --help ) show_help; exit 1 ;;
			-- ) shift; break ;;
			* ) break ;;
		esac
	done
		
	filename="$1"
	isalphanum='^[a-zA-Z0-9]+$'

	[ -z "$filename" ] && die 'filename cannot be empty'
	[[ ! $filename =~ $isalphanum ]] && die 'use only alphanumeric characters'
	[ -f "$filename" ] && die 'file already exists'

	cat <<EOF > "$filename"
#!/bin/bash

function main() {
	parsed_args=\$(getopt -o h -l help -n '$filename' -- "\$@")
	getopt_exit_code=\$?

	if [ \$getopt_exit_code -ne 0 ] ; then
		exit 1
	fi

	eval set -- "\$parsed_args" 

	while :; do
		case "\$1" in
			-h | --help ) show_help; exit 1 ;;
			-- ) shift; break ;;
			* ) break ;;
		esac
	done
}

function die() {
	printf "error: %s\\n" "\$@" >&2
	exit 1
}

function show_help() {
	echo Usage: $filename [ -h ]
	echo Options are:
	echo '     -h | --help                    display this message and exit'
}

main "\$@"
EOF

	chmod +x "$filename"
}

function die() {
	printf "error: %s\n" "$@" >&2
	exit 1
}

function show_help() {
	echo Usage: mkbash [ -h ] FILENAME
	echo Options are:
	echo '     -h | --help                    display this message and exit'
}

main "$@"
