#!/bin/bash

# 
# change the volume of the specified
# application
#

declare QUERY
declare VOLUME

function main() {
	parsed_args=$(getopt -o mh -l mute,help -n 'psound' -- "$@")
	getopt_exit_code=$?
	
	[ $getopt_exit_code -ne 0 ] && exit 1

	eval set -- "$parsed_args"

	while :; do
		case "$1" in
			-m | --mute ) VOLUME=0; shift 2 ;;
			-h | --help ) show_help; exit 1 ;;
			-- ) shift; break ;;
			* ) break ;;
		esac
	done
	
	if [ -z "$1" ] ; then
		die 'you must specify a query'
	else
		QUERY="$1";
	fi

	if [ ! -z "$2" ] ; then
		if [ "$VOLUME" == "0" ] ; then
			die 'you must not specify the volume parameter when the mute option is set'
		else
			VOLUME="$2"
		fi
	fi

	if [ -z "$VOLUME" ] ; then
		die 'you must specify the volume level'
	fi

	match=$(pactl list sink-inputs | awk 'BEGIN { FS="\"" } /application\.name/{ print $2 }' | grep -iF "$QUERY" | head -n1)

	if [ -z "$match" ] ; then
		die "no matches"
	fi

	sinkid=$(pactl list sink-inputs | grep -F "application.name = \"$match\"" -B 30 | rev | grep '# tupnI kniS' | cut -d '#' -f1 | rev)
	pactl set-sink-input-volume "$sinkid" "$VOLUME%"
}

function die() {
	printf "error: %s\n" "$@" >&2
	exit 1
}

function show_help() {
	echo Usage: psound [ -mh ] QUERY VOLUME
	echo Options are:
	echo '     -m | --mute                    mute the specified process'
	echo '     -h | --help                    display this message and exit'
}

main "$@"
